from datetime import datetime, timedelta
from io import BytesIO

from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from openpyxl.styles import Font
from openpyxl.workbook import Workbook
from sqlalchemy import select, delete, func
from sqlalchemy.exc import IntegrityError

from db.models import Session, Wallet, Balance, User, CryptoFlow
from config import ADMIN_IDS, USER_PASS

router = Router()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    waiting_for_wallet_address = State()
    waiting_for_wallet_remove = State()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å –ª—é–±—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()

    if message.from_user.id in ADMIN_IDS:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=get_admin_keyboard()
        )
    else:
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        async with Session() as session:
            result = await session.execute(
                select(User).where(User.user_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()

            if not user:
                user = User(user_id=message.from_user.id)
                session.add(user)
                await session.commit()

            if user.is_active:
                await message.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", F.from_user.id.in_(ADMIN_IDS))
async def show_stats(message: Message):
    async with Session() as session:
        now = datetime.utcnow()
        today_start = now.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(hours=3)
        week_start = now - timedelta(days=now.weekday())
        week_start = week_start.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(hours=3)
        month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0) - timedelta(hours=3)

        queries = {
            "—Å—É—Ç–∫–∏": session.execute(
                select(func.sum(CryptoFlow.price))
                .where(
                    CryptoFlow.price > 0,
                    CryptoFlow.time_created >= today_start
                )
            ),
            "–Ω–µ–¥–µ–ª—é": session.execute(
                select(func.sum(CryptoFlow.price))
                .where(
                    CryptoFlow.price > 0,
                    CryptoFlow.time_created >= week_start
                )
            ),
            "–º–µ—Å—è—Ü": session.execute(
                select(func.sum(CryptoFlow.price))
                .where(
                    CryptoFlow.price > 0,
                    CryptoFlow.time_created >= month_start
                )
            ),
            "–≤—Å–µ –≤—Ä–µ–º—è": session.execute(
                select(func.sum(CryptoFlow.price))
                .where(CryptoFlow.price > 0)
            )
        }

        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π:\n\n"
        for period, query in queries.items():
            result = await query
            total = result.scalar() or 0
            stats_text += f"–ó–∞ {period}: {total:.2f} $\n"

        await message.answer(stats_text, reply_markup=get_admin_keyboard())


@router.message(F.text == "üì• –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", F.from_user.id.in_(ADMIN_IDS))
async def add_wallet_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç–∏–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa btc):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_wallet_address)


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", F.from_user.id.in_(ADMIN_IDS))
async def remove_wallet_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç–∏–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa btc):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_wallet_remove)


@router.message(AdminStates.waiting_for_wallet_address, F.from_user.id.in_(ADMIN_IDS))
async def add_wallet_finish(message: Message, state: FSMContext):
    try:
        address, token = message.text.split()
        token = token.lower()

        if token not in ['btc', 'eth', 'ton', 'tron']:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: btc, eth, ton, tron")
            await state.clear()
            return

        async with Session() as session:
            wallet = Wallet(address=address, token=token)
            session.add(wallet)
            await session.commit()
            await message.answer(f"–ö–æ—à–µ–ª–µ–∫ {address} ({token}) –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=get_admin_keyboard())

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <address> <token>")
    except IntegrityError:
        await message.answer("–≠—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ", reply_markup=get_admin_keyboard())
    finally:
        await state.clear()


@router.message(AdminStates.waiting_for_wallet_remove, F.from_user.id.in_(ADMIN_IDS))
async def remove_wallet_finish(message: Message, state: FSMContext):
    try:
        address, token = message.text.split()
        token = token.lower()

        async with Session() as session:
            await session.execute(
                delete(Balance).where(
                    Balance.wallet_id.in_(
                        select(Wallet.id).where(
                            Wallet.address == address,
                            Wallet.token == token
                        )
                    )
                )
            )

            result = await session.execute(
                delete(Wallet).where(
                    Wallet.address == address,
                    Wallet.token == token
                )
            )

            await session.commit()

            if result.rowcount > 0:
                await message.answer(f"–ö–æ—à–µ–ª–µ–∫ {address} ({token}) —É–¥–∞–ª–µ–Ω", reply_markup=get_admin_keyboard())
            else:
                await message.answer("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_admin_keyboard())

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <address> <token>")
    finally:
        await state.clear()


@router.message(F.text, ~F.from_user.id.in_(ADMIN_IDS))
async def handle_password(message: Message):
    async with Session() as session:
        result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if user and not user.is_active:
            if message.text == USER_PASS:
                user.is_active = True
                await session.commit()
                await message.answer("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")